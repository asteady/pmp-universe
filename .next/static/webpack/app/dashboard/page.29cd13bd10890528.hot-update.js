"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/api/mockData.ts":
/*!*****************************!*\
  !*** ./src/api/mockData.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAudiencePerformanceData: () => (/* binding */ getAudiencePerformanceData),\n/* harmony export */   getBadgeConditions: () => (/* binding */ getBadgeConditions),\n/* harmony export */   getCampaignData: () => (/* binding */ getCampaignData),\n/* harmony export */   getChartData: () => (/* binding */ getChartData),\n/* harmony export */   getFootTrafficData: () => (/* binding */ getFootTrafficData),\n/* harmony export */   getGeoDeviceData: () => (/* binding */ getGeoDeviceData),\n/* harmony export */   getLeaderboardData: () => (/* binding */ getLeaderboardData),\n/* harmony export */   getNewToBrandData: () => (/* binding */ getNewToBrandData),\n/* harmony export */   getPlacementData: () => (/* binding */ getPlacementData),\n/* harmony export */   getProgressData: () => (/* binding */ getProgressData),\n/* harmony export */   getViewabilityData: () => (/* binding */ getViewabilityData)\n/* harmony export */ });\n// Enhanced Mock Data for Infillion Analytics Dashboard\n// Realistic campaign data with actual advertisers and campaign names\nconst realisticAdvertisers = [\n    'Procter & Gamble',\n    'Nike',\n    'Coca-Cola',\n    'McDonald\\'s',\n    'Apple',\n    'Amazon',\n    'Disney',\n    'Marriott',\n    'Lexus',\n    'Verizon',\n    'AT&T',\n    'Samsung',\n    'Target',\n    'Walmart',\n    'Starbucks',\n    'Netflix',\n    'Spotify',\n    'Uber',\n    'Airbnb',\n    'Tesla',\n    'Microsoft',\n    'Google',\n    'Meta',\n    'Intel',\n    'Ford',\n    'Toyota'\n];\nconst realisticCampaignNames = [\n    'Pampers Spring 2024',\n    'Nike Run Club',\n    'Coca-Cola Summer Refresh',\n    'McDonald\\'s Happy Meal',\n    'iPhone 15 Launch',\n    'Amazon Prime Day',\n    'Disney+ Family Plan',\n    'Marriott Bonvoy Summer',\n    'Lexus RX Launch',\n    'Verizon 5G Unlimited',\n    'AT&T Fiber',\n    'Samsung Galaxy S24',\n    'Target Back to School',\n    'Walmart Holiday Savings',\n    'Starbucks Pumpkin Spice',\n    'Netflix Stranger Things',\n    'Spotify Wrapped',\n    'Uber Eats',\n    'Airbnb Experiences',\n    'Tesla Model Y',\n    'Microsoft 365',\n    'Google Pixel',\n    'Meta Quest',\n    'Intel Core i9',\n    'Ford F-150 Lightning',\n    'Toyota Camry Hybrid'\n];\nconst realisticStrategyNames = [\n    'Awareness',\n    'Consideration',\n    'Conversion',\n    'Retargeting',\n    'Cross-Device',\n    'Loyalty',\n    'Acquisition',\n    'Engagement',\n    'Brand Safety',\n    'Performance'\n];\nconst realisticCreativeNames = [\n    'Pampers_30s_Video_A',\n    'NikeRC_15s_Video_B',\n    'CocaCola_Display_Leaderboard',\n    'McDonalds_MPU_Static',\n    'iPhone15_30s_Video_C',\n    'AmazonPrime_Display_Banner',\n    'DisneyPlus_Display_MPU',\n    'Marriott_15s_Video_C',\n    'LexusRX_Display_Leaderboard',\n    'Verizon5G_30s_Video_A',\n    'ATTFiber_Display_Banner',\n    'SamsungGalaxy_15s_Video_B',\n    'TargetBTS_Display_MPU',\n    'WalmartHoliday_30s_Video_A',\n    'StarbucksPS_Display_Banner',\n    'NetflixST_15s_Video_C',\n    'SpotifyWrapped_Display_Leaderboard',\n    'UberEats_30s_Video_A',\n    'AirbnbExp_Display_MPU',\n    'TeslaModelY_15s_Video_B',\n    'Microsoft365_Display_Banner',\n    'GooglePixel_30s_Video_C',\n    'MetaQuest_Display_Leaderboard',\n    'IntelCore_15s_Video_A',\n    'FordF150_Display_MPU',\n    'ToyotaCamry_30s_Video_B'\n];\nconst realisticSiteDomains = [\n    'cnn.com',\n    'nytimes.com',\n    'washingtonpost.com',\n    'usatoday.com',\n    'foxnews.com',\n    'abcnews.go.com',\n    'cbsnews.com',\n    'nbcnews.com',\n    'reuters.com',\n    'bloomberg.com',\n    'wsj.com',\n    'ft.com',\n    'techcrunch.com',\n    'wired.com',\n    'theverge.com',\n    'engadget.com',\n    'mashable.com',\n    'gizmodo.com',\n    'arstechnica.com',\n    'venturebeat.com',\n    'forbes.com',\n    'businessinsider.com',\n    'cnbc.com',\n    'marketwatch.com',\n    'yahoo.com'\n];\nconst realisticCities = [\n    'New York',\n    'Los Angeles',\n    'Chicago',\n    'Houston',\n    'Phoenix',\n    'Philadelphia',\n    'San Antonio',\n    'San Diego',\n    'Dallas',\n    'San Jose',\n    'Austin',\n    'Jacksonville',\n    'Fort Worth',\n    'Columbus',\n    'Charlotte',\n    'San Francisco',\n    'Indianapolis',\n    'Seattle',\n    'Denver',\n    'Washington',\n    'Boston',\n    'El Paso',\n    'Nashville',\n    'Detroit',\n    'Oklahoma City',\n    'Portland',\n    'Las Vegas',\n    'Memphis',\n    'Louisville',\n    'Baltimore'\n];\nconst realisticRegions = [\n    'NY',\n    'CA',\n    'IL',\n    'TX',\n    'AZ',\n    'PA',\n    'FL',\n    'OH',\n    'GA',\n    'NC',\n    'MI',\n    'WA',\n    'CO',\n    'VA',\n    'MA',\n    'TN',\n    'IN',\n    'MO',\n    'MD',\n    'WI',\n    'MN',\n    'LA',\n    'AL',\n    'SC',\n    'KY',\n    'OR',\n    'OK',\n    'CT',\n    'IA',\n    'MS',\n    'AR',\n    'KS',\n    'UT',\n    'NV',\n    'NM',\n    'NE',\n    'WV',\n    'ID',\n    'HI',\n    'NH',\n    'ME',\n    'RI',\n    'MT',\n    'DE',\n    'SD',\n    'ND',\n    'AK',\n    'VT',\n    'WY'\n];\n// Remove all top-level Math.random and Date.now usage\n// Export functions like getCampaignData, getGeoDeviceData, etc. that generate and return the data\nconst getCampaignData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            date: new Date(2025, 6, i + 1).toISOString().split('T')[0],\n            campaign_name: realisticCampaignNames[i % realisticCampaignNames.length],\n            campaign_id: \"camp_\".concat(i + 1),\n            strategy_name: realisticStrategyNames[i % realisticStrategyNames.length],\n            strategy_id: \"strat_\".concat(i + 1),\n            strategy_type: [\n                'Display',\n                'Video',\n                'Mobile',\n                'Connected TV'\n            ][i % 4],\n            audience_segment_name: \"Audience \".concat(i + 1),\n            advertiser: realisticAdvertisers[i % realisticAdvertisers.length],\n            creative: realisticCreativeNames[i % realisticCreativeNames.length],\n            impressions: Math.floor(Math.random() * 1000000) + 100000,\n            clicks: Math.floor(Math.random() * 50000) + 1000,\n            total_conversions: Math.floor(Math.random() * 5000) + 100,\n            total_revenue: Math.floor(Math.random() * 100000) + 5000,\n            total_spend: Math.floor(Math.random() * 50000) + 2000,\n            ctr: Number((Math.random() * 0.1 + 0.01).toFixed(4)),\n            cpa: Number((Math.random() * 50 + 10).toFixed(2)),\n            roi: Number((Math.random() * 3 + 0.5).toFixed(2)),\n            viewability_rate: Number((Math.random() * 0.3 + 0.7).toFixed(4)),\n            vcr: Number((Math.random() * 0.4 + 0.6).toFixed(4)),\n            dwell_time: Number((Math.random() * 30 + 10).toFixed(2)),\n            site_domain: realisticSiteDomains[i % realisticSiteDomains.length],\n            city_name: realisticCities[i % realisticCities.length],\n            demographic_discrepancy: Number((Math.random() * 0.5).toFixed(4)),\n            inventory_type: [\n                'premium',\n                'programmatic',\n                'direct'\n            ][i % 3],\n            channel: [\n                'Display',\n                'Video',\n                'Mobile',\n                'Connected TV'\n            ][i % 4],\n            device_type: [\n                'Desktop',\n                'Mobile',\n                'Tablet',\n                'Connected TV'\n            ][i % 4],\n            poi: \"\".concat(realisticCities[i % realisticCities.length], \" Store\"),\n            completed_views: Math.floor(Math.random() * 80000) + 5000,\n            confidence: Number((Math.random() * 0.2 + 0.8).toFixed(2))\n        }));\n};\nconst getNewToBrandData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            ...getCampaignData(1)[0],\n            new_to_brand_conversions: Math.floor(Math.random() * 2000) + 50,\n            new_to_brand_revenue: Math.floor(Math.random() * 50000) + 2000,\n            new_to_brand_cpa: Number((Math.random() * 40 + 15).toFixed(2)),\n            new_to_brand_roi: Number((Math.random() * 2.5 + 0.8).toFixed(2)),\n            returning_conversions: Math.floor(Math.random() * 3000) + 50,\n            returning_revenue: Math.floor(Math.random() * 60000) + 3000,\n            lookback_window: [\n                30,\n                60,\n                90,\n                180\n            ][i % 4]\n        }));\n};\nconst getViewabilityData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            ...getCampaignData(1)[0],\n            in_view_impressions: Math.floor(getCampaignData(1)[0].impressions * (Math.random() * 0.3 + 0.7)),\n            viewability_rate: Number((Math.random() * 0.3 + 0.7).toFixed(4)),\n            viewability_provider: [\n                'IAS',\n                'Moat',\n                'DoubleVerify',\n                'Comscore'\n            ][i % 4],\n            vcr: Number((Math.random() * 0.4 + 0.6).toFixed(4)),\n            video_starts: Math.floor(Math.random() * 100000) + 10000,\n            video_completions: Math.floor(Math.random() * 80000) + 5000,\n            creative_size: [\n                '300x250',\n                '728x90',\n                '160x600',\n                '320x50',\n                '970x250'\n            ][i % 5],\n            channel_type: [\n                'Display',\n                'Video',\n                'Mobile',\n                'Connected TV'\n            ][i % 4]\n        }));\n};\nconst getGeoDeviceData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            ...getCampaignData(1)[0],\n            country: 'United States',\n            region: realisticRegions[i % realisticRegions.length],\n            city: realisticCities[i % realisticCities.length],\n            dma: \"\".concat(realisticCities[i % realisticCities.length], \" DMA\"),\n            zip_code: \"\".concat(Math.floor(Math.random() * 99999) + 10000),\n            device_type: [\n                'Desktop',\n                'Mobile',\n                'Tablet',\n                'Connected TV'\n            ][i % 4],\n            device_make: [\n                'Apple',\n                'Samsung',\n                'Google',\n                'Microsoft',\n                'LG',\n                'Sony'\n            ][i % 6],\n            device_model: [\n                'iPhone',\n                'Galaxy',\n                'Pixel',\n                'Surface',\n                'G Series',\n                'Bravia'\n            ][i % 6],\n            os_type: [\n                'iOS',\n                'Android',\n                'Windows',\n                'macOS',\n                'Linux'\n            ][i % 5],\n            browser: [\n                'Chrome',\n                'Safari',\n                'Firefox',\n                'Edge',\n                'Opera'\n            ][i % 5],\n            age_group: [\n                '18-24',\n                '25-34',\n                '35-44',\n                '45-54',\n                '55+'\n            ][i % 5],\n            gender: [\n                'Male',\n                'Female',\n                'Other'\n            ][i % 3],\n            hh_income: [\n                '<$50K',\n                '$50K-$100K',\n                '$100K-$150K',\n                '$150K+'\n            ][i % 4],\n            demographic_discrepancy: Number((Math.random() * 0.5).toFixed(4)),\n            impressions: Math.floor(Math.random() * 500000) + 50000,\n            clicks: Math.floor(Math.random() * 25000) + 500,\n            conversions: Math.floor(Math.random() * 2000) + 50,\n            revenue: Math.floor(Math.random() * 50000) + 2000,\n            spend: Math.floor(Math.random() * 25000) + 1000\n        }));\n};\nconst getPlacementData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            date: new Date(2025, 6, i % 30 + 1).toISOString().split('T')[0],\n            site_domain: realisticSiteDomains[i % realisticSiteDomains.length],\n            app_name: [\n                'Facebook',\n                'Instagram',\n                'TikTok',\n                'YouTube',\n                'Twitter',\n                'LinkedIn',\n                'Snapchat',\n                'Pinterest'\n            ][i % 8],\n            primary_seller_name: [\n                'Google',\n                'Facebook',\n                'Amazon',\n                'Microsoft',\n                'Twitter',\n                'TikTok',\n                'Snap Inc'\n            ][i % 7],\n            inventory_type: [\n                'premium',\n                'programmatic',\n                'direct'\n            ][i % 3],\n            impressions: Math.floor(Math.random() * 500000) + 50000,\n            clicks: Math.floor(Math.random() * 25000) + 500,\n            total_conversions: Math.floor(Math.random() * 2000) + 50,\n            ctr: Number((Math.random() * 0.08 + 0.01).toFixed(4)),\n            cpa: Number((Math.random() * 60 + 15).toFixed(2)),\n            companion_clicks: Math.floor(Math.random() * 1000) + 10,\n            video_starts: Math.floor(Math.random() * 50000) + 1000,\n            skipped_impressions: Math.floor(Math.random() * 10000) + 100,\n            rank: i + 1,\n            goal_impressions: Math.floor(Math.random() * 600000) + 100000,\n            budget_spent: Math.floor(Math.random() * 40000) + 5000,\n            total_budget: Math.floor(Math.random() * 50000) + 10000,\n            advertiser: realisticAdvertisers[i % realisticAdvertisers.length],\n            campaign_name: realisticCampaignNames[i % realisticCampaignNames.length]\n        }));\n};\nconst getFootTrafficData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>{\n        const advertiser = realisticAdvertisers[i % realisticAdvertisers.length];\n        // Generate realistic dwell times based on advertiser type\n        let dwellTime;\n        if (advertiser.includes('McDonald') || advertiser.includes('Starbucks') || advertiser.includes('7/11')) {\n            // Quick service restaurants: 5-15 minutes\n            dwellTime = Math.random() * 10 + 5;\n        } else if (advertiser.includes('Target') || advertiser.includes('Walmart') || advertiser.includes('Amazon')) {\n            // Retail stores: 20-60 minutes\n            dwellTime = Math.random() * 40 + 20;\n        } else if (advertiser.includes('Marriott') || advertiser.includes('Disney') || advertiser.includes('Netflix')) {\n            // Entertainment/hospitality: 30-90 minutes\n            dwellTime = Math.random() * 60 + 30;\n        } else if (advertiser.includes('Apple') || advertiser.includes('Samsung') || advertiser.includes('Tesla')) {\n            // Tech/electronics: 15-45 minutes\n            dwellTime = Math.random() * 30 + 15;\n        } else {\n            // Default: 10-40 minutes\n            dwellTime = Math.random() * 30 + 10;\n        }\n        return {\n            date: new Date(2025, 6, i + 1).toISOString().split('T')[0],\n            city_name: realisticCities[i % realisticCities.length],\n            region_name: realisticRegions[i % realisticRegions.length],\n            device_type: [\n                'Mobile',\n                'Desktop',\n                'Tablet'\n            ][i % 3],\n            site_domain: realisticSiteDomains[i % realisticSiteDomains.length],\n            app_name: [\n                'Facebook',\n                'Instagram',\n                'TikTok',\n                'YouTube',\n                'Twitter'\n            ][i % 5],\n            verified_visits: Math.floor(Math.random() * 1000) + 100,\n            verified_unique_visits: Math.floor(Math.random() * 800) + 80,\n            projected_visits: Math.floor(Math.random() * 2000) + 200,\n            projected_unique_visits: Math.floor(Math.random() * 1500) + 150,\n            dwell_time: Number(dwellTime.toFixed(2)),\n            median_dwell_time: Number((dwellTime * 0.8).toFixed(2)),\n            average_dwell_time: Number(dwellTime.toFixed(2)),\n            campaign_name: realisticCampaignNames[i % realisticCampaignNames.length],\n            campaign_id: \"camp_\".concat(i + 1),\n            total_verified_visits: Math.floor(Math.random() * 5000) + 500,\n            advertiser: advertiser,\n            poi: \"\".concat(realisticCities[i % realisticCities.length], \" Store\"),\n            placement_name: realisticCreativeNames[i % realisticCreativeNames.length],\n            distance_traveled: (Math.random() * 20 + 1).toFixed(1),\n            time_elapsed: Math.floor(Math.random() * 60 + 5),\n            device_os: [\n                'iOS',\n                'Android',\n                'Windows',\n                'macOS'\n            ][i % 4]\n        };\n    });\n};\nconst getAudiencePerformanceData = (count)=>{\n    return Array.from({\n        length: count\n    }, (_, i)=>({\n            id: 'seg' + (i + 1),\n            name: 'Audience ' + (i + 1),\n            advertiser: realisticAdvertisers[i % realisticAdvertisers.length],\n            campaign: realisticCampaignNames[i % realisticCampaignNames.length],\n            strategy: realisticStrategyNames[i % realisticStrategyNames.length],\n            creative: realisticCreativeNames[i % realisticCreativeNames.length],\n            channel: [\n                'Display',\n                'Video',\n                'Mobile',\n                'Connected TV'\n            ][i % 4],\n            device_type: [\n                'Desktop',\n                'Mobile',\n                'CTV'\n            ][i % 3],\n            poi: \"\".concat(realisticCities[i % realisticCities.length], \" Store\"),\n            impressions: Math.floor(Math.random() * 100000) + 50000,\n            clicks: Math.floor(Math.random() * 5000) + 1000,\n            completed_views: Math.floor(Math.random() * 80000) + 50000,\n            vcr: Number((Math.random() * 0.7 + 0.6).toFixed(2)),\n            ctr: Number((Math.random() * 0.02 + 0.01).toFixed(2)),\n            conversions: Math.floor(Math.random() * 500) + 100,\n            roi: Number((Math.random() * 3 + 0.5).toFixed(2)),\n            discrepancy: Number((Math.random() * 0.1).toFixed(2)),\n            confidence: Number((Math.random() * 0.2 + 0.8).toFixed(2)),\n            viewability: Number((Math.random() * 0.9 + 0.8).toFixed(2)),\n            color: [\n                'blue',\n                'purple',\n                'green',\n                'yellow',\n                'pink'\n            ][i % 5],\n            description: 'Description for Audience ' + (i + 1)\n        }));\n};\n// Chart data helpers\nconst getChartData = function(data, type) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    switch(type){\n        case 'bar':\n            return {\n                labels: data.slice(0, 10).map((d)=>d.campaign_name || d.site_domain),\n                datasets: [\n                    {\n                        label: options.label || 'Value',\n                        data: data.slice(0, 10).map((d)=>d[options.field] || d.impressions),\n                        backgroundColor: options.backgroundColor || 'rgba(0, 212, 255, 0.8)',\n                        borderColor: options.borderColor || '#00d4ff',\n                        borderWidth: 1\n                    }\n                ]\n            };\n        case 'line':\n            return {\n                labels: data.slice(0, 15).map((d)=>d.date),\n                datasets: [\n                    {\n                        label: options.label || 'Value',\n                        data: data.slice(0, 15).map((d)=>d[options.field] || d.ctr),\n                        borderColor: options.borderColor || '#ff69b4',\n                        backgroundColor: options.backgroundColor || 'rgba(255, 105, 180, 0.1)',\n                        fill: true,\n                        tension: 0.4\n                    }\n                ]\n            };\n        case 'doughnut':\n            return {\n                labels: options.labels || [\n                    'Category 1',\n                    'Category 2',\n                    'Category 3'\n                ],\n                datasets: [\n                    {\n                        data: options.data || [\n                            300,\n                            200,\n                            100\n                        ],\n                        backgroundColor: options.backgroundColor || [\n                            'rgba(0, 212, 255, 0.8)',\n                            'rgba(255, 105, 180, 0.8)',\n                            'rgba(139, 92, 246, 0.8)'\n                        ],\n                        borderWidth: 2,\n                        borderColor: '#1a1a1a'\n                    }\n                ]\n            };\n        default:\n            return {\n                labels: [],\n                datasets: []\n            };\n    }\n};\n// Badge conditions\nconst getBadgeConditions = (data)=>{\n    const topCTR = data.reduce((max, item)=>parseFloat(item.ctr) > parseFloat(max.ctr) ? item : max);\n    const topViewability = data.reduce((max, item)=>parseFloat(item.viewability_rate) > parseFloat(max.viewability_rate) ? item : max);\n    const topVerifiedVisits = getFootTrafficData(1)[0] // Get a single item for comparison\n    ;\n    return {\n        topCTR: {\n            campaign: topCTR.campaign_name,\n            value: topCTR.ctr\n        },\n        topViewability: {\n            campaign: topViewability.campaign_name,\n            value: topViewability.viewability_rate\n        },\n        topVerifiedVisits: {\n            campaign: topVerifiedVisits.campaign_name,\n            value: topVerifiedVisits.verified_visits\n        }\n    };\n};\n// Leaderboard data\nconst getLeaderboardData = (data, metric)=>{\n    return data.sort((a, b)=>parseFloat(b[metric]) - parseFloat(a[metric])).slice(0, 10).map((item, index)=>({\n            rank: index + 1,\n            name: item.campaign_name || item.site_domain,\n            value: parseFloat(item[metric]).toFixed(2),\n            metric: metric,\n            change: (Math.random() * 20 - 10).toFixed(1)\n        }));\n};\n// Progress bar data\nconst getProgressData = (data)=>{\n    return data.slice(0, 5).map((item)=>({\n            label: item.campaign_name || item.site_domain,\n            current: item.impressions || item.verified_visits,\n            target: Math.floor((item.impressions || item.verified_visits) * 1.2),\n            unit: 'impressions',\n            color: [\n                '#00d4ff',\n                '#ff69b4',\n                '#8b5cf6',\n                '#00ff88',\n                '#ff6b35'\n            ][Math.floor(Math.random() * 5)]\n        }));\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/mockData.ts\n"));

/***/ })

});
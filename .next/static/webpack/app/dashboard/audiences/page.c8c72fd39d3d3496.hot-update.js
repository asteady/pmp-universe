"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/audiences/page",{

/***/ "(app-pages-browser)/./src/api/mockData.ts":
/*!*****************************!*\
  !*** ./src/api/mockData.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audiencePerformanceData: () => (/* binding */ audiencePerformanceData),\n/* harmony export */   campaignData: () => (/* binding */ campaignData),\n/* harmony export */   footTrafficData: () => (/* binding */ footTrafficData),\n/* harmony export */   geoDeviceData: () => (/* binding */ geoDeviceData),\n/* harmony export */   getBadgeConditions: () => (/* binding */ getBadgeConditions),\n/* harmony export */   getChartData: () => (/* binding */ getChartData),\n/* harmony export */   getLeaderboardData: () => (/* binding */ getLeaderboardData),\n/* harmony export */   getProgressData: () => (/* binding */ getProgressData),\n/* harmony export */   newToBrandData: () => (/* binding */ newToBrandData),\n/* harmony export */   placementData: () => (/* binding */ placementData),\n/* harmony export */   viewabilityData: () => (/* binding */ viewabilityData)\n/* harmony export */ });\n// Enhanced Mock Data for Infillion Analytics Dashboard\n// 50+ entries for each tab with realistic campaign data\nconst campaignData = Array.from({\n    length: 50\n}, (_, i)=>({\n        date: new Date(2025, 6, i + 1).toISOString().split('T')[0],\n        campaign_name: \"Campaign \".concat(i + 1),\n        campaign_id: \"camp_\".concat(i + 1),\n        strategy_name: \"Strategy \".concat(i + 1),\n        strategy_id: \"strat_\".concat(i + 1),\n        strategy_type: [\n            'Display',\n            'Video',\n            'Mobile',\n            'Connected TV'\n        ][i % 4],\n        audience_segment_name: \"Audience \".concat(i + 1),\n        impressions: Math.floor(Math.random() * 1000000) + 100000,\n        clicks: Math.floor(Math.random() * 50000) + 1000,\n        total_conversions: Math.floor(Math.random() * 5000) + 100,\n        total_revenue: Math.floor(Math.random() * 100000) + 5000,\n        total_spend: Math.floor(Math.random() * 50000) + 2000,\n        ctr: (Math.random() * 0.1 + 0.01).toFixed(4),\n        cpa: (Math.random() * 50 + 10).toFixed(2),\n        roi: (Math.random() * 3 + 0.5).toFixed(2),\n        viewability_rate: (Math.random() * 0.3 + 0.7).toFixed(4),\n        vcr: (Math.random() * 0.4 + 0.6).toFixed(4),\n        dwell_time: (Math.random() * 30 + 10).toFixed(2),\n        site_domain: [\n            'cnn.com',\n            'nytimes.com',\n            'washingtonpost.com',\n            'usatoday.com',\n            'foxnews.com'\n        ][i % 5],\n        city_name: [\n            'New York',\n            'Los Angeles',\n            'Chicago',\n            'Houston',\n            'Phoenix',\n            'Philadelphia',\n            'San Antonio',\n            'San Diego',\n            'Dallas',\n            'San Jose'\n        ][i % 10],\n        demographic_discrepancy: (Math.random() * 0.5).toFixed(4),\n        inventory_type: [\n            'premium',\n            'programmatic',\n            'direct'\n        ][i % 3]\n    }));\nconst newToBrandData = Array.from({\n    length: 50\n}, (_, i)=>({\n        ...campaignData[i],\n        new_to_brand_conversions: Math.floor(Math.random() * 2000) + 50,\n        new_to_brand_revenue: Math.floor(Math.random() * 50000) + 2000,\n        new_to_brand_cpa: (Math.random() * 40 + 15).toFixed(2),\n        new_to_brand_roi: (Math.random() * 2.5 + 0.8).toFixed(2),\n        returning_conversions: Math.floor(Math.random() * 3000) + 50,\n        returning_revenue: Math.floor(Math.random() * 60000) + 3000,\n        lookback_window: [\n            30,\n            60,\n            90,\n            180\n        ][i % 4]\n    }));\nconst viewabilityData = Array.from({\n    length: 50\n}, (_, i)=>({\n        ...campaignData[i],\n        in_view_impressions: Math.floor(campaignData[i].impressions * (Math.random() * 0.3 + 0.7)),\n        viewability_rate: (Math.random() * 0.3 + 0.7).toFixed(4),\n        viewability_provider: [\n            'IAS',\n            'Moat',\n            'DoubleVerify',\n            'Comscore'\n        ][i % 4],\n        vcr: (Math.random() * 0.4 + 0.6).toFixed(4),\n        video_starts: Math.floor(Math.random() * 100000) + 10000,\n        video_completions: Math.floor(Math.random() * 80000) + 5000,\n        creative_size: [\n            '300x250',\n            '728x90',\n            '160x600',\n            '320x50',\n            '970x250'\n        ][i % 5],\n        channel_type: [\n            'Display',\n            'Video',\n            'Mobile',\n            'Connected TV'\n        ][i % 4]\n    }));\nconst geoDeviceData = Array.from({\n    length: 50\n}, (_, i)=>({\n        ...campaignData[i],\n        country: 'United States',\n        region: [\n            'NY',\n            'CA',\n            'IL',\n            'TX',\n            'AZ',\n            'PA',\n            'FL',\n            'OH',\n            'GA',\n            'NC'\n        ][i % 10],\n        city: [\n            'New York',\n            'Los Angeles',\n            'Chicago',\n            'Houston',\n            'Phoenix',\n            'Philadelphia',\n            'San Antonio',\n            'San Diego',\n            'Dallas',\n            'San Jose'\n        ][i % 10],\n        device_type: [\n            'Desktop',\n            'Mobile',\n            'Tablet',\n            'Connected TV'\n        ][i % 4],\n        device_make: [\n            'Apple',\n            'Samsung',\n            'Google',\n            'Microsoft'\n        ][i % 4],\n        device_model: [\n            'iPhone',\n            'Galaxy',\n            'Pixel',\n            'Surface'\n        ][i % 4],\n        os_type: [\n            'iOS',\n            'Android',\n            'Windows',\n            'macOS'\n        ][i % 4],\n        browser: [\n            'Chrome',\n            'Safari',\n            'Firefox',\n            'Edge'\n        ][i % 4],\n        age_group: [\n            '18-24',\n            '25-34',\n            '35-44',\n            '45-54',\n            '55+'\n        ][i % 5],\n        gender: [\n            'Male',\n            'Female',\n            'Other'\n        ][i % 3],\n        hh_income: [\n            '<$50K',\n            '$50K-$100K',\n            '$100K-$150K',\n            '$150K+'\n        ][i % 4],\n        demographic_discrepancy: (Math.random() * 0.5).toFixed(4)\n    }));\nconst placementData = Array.from({\n    length: 75\n}, (_, i)=>({\n        date: new Date(2025, 6, i % 30 + 1).toISOString().split('T')[0],\n        site_domain: [\n            'cnn.com',\n            'nytimes.com',\n            'washingtonpost.com',\n            'usatoday.com',\n            'foxnews.com',\n            'abcnews.go.com',\n            'cbsnews.com',\n            'nbcnews.com',\n            'reuters.com',\n            'bloomberg.com',\n            'wsj.com',\n            'ft.com',\n            'techcrunch.com',\n            'wired.com',\n            'theverge.com',\n            'engadget.com',\n            'mashable.com',\n            'gizmodo.com',\n            'arstechnica.com',\n            'venturebeat.com'\n        ][i % 20],\n        app_name: [\n            'Facebook',\n            'Instagram',\n            'TikTok',\n            'YouTube',\n            'Twitter',\n            'LinkedIn',\n            'Snapchat',\n            'Pinterest'\n        ][i % 8],\n        primary_seller_name: [\n            'Google',\n            'Facebook',\n            'Amazon',\n            'Microsoft',\n            'Twitter'\n        ][i % 5],\n        inventory_type: [\n            'premium',\n            'programmatic',\n            'direct'\n        ][i % 3],\n        impressions: Math.floor(Math.random() * 500000) + 50000,\n        clicks: Math.floor(Math.random() * 25000) + 500,\n        total_conversions: Math.floor(Math.random() * 2000) + 50,\n        ctr: (Math.random() * 0.08 + 0.01).toFixed(4),\n        cpa: (Math.random() * 60 + 15).toFixed(2),\n        companion_clicks: Math.floor(Math.random() * 1000) + 10,\n        video_starts: Math.floor(Math.random() * 50000) + 1000,\n        skipped_impressions: Math.floor(Math.random() * 10000) + 100,\n        rank: i + 1,\n        goal_impressions: Math.floor(Math.random() * 600000) + 100000,\n        budget_spent: Math.floor(Math.random() * 40000) + 5000,\n        total_budget: Math.floor(Math.random() * 50000) + 10000\n    }));\nconst footTrafficData = Array.from({\n    length: 50\n}, (_, i)=>({\n        date: new Date(2025, 6, i + 1).toISOString().split('T')[0],\n        city_name: [\n            'New York',\n            'Los Angeles',\n            'Chicago',\n            'Houston',\n            'Phoenix',\n            'Philadelphia',\n            'San Antonio',\n            'San Diego',\n            'Dallas',\n            'San Jose'\n        ][i % 10],\n        region_name: [\n            'NY',\n            'CA',\n            'IL',\n            'TX',\n            'AZ',\n            'PA',\n            'FL',\n            'OH',\n            'GA',\n            'NC'\n        ][i % 10],\n        device_type: [\n            'Mobile',\n            'Desktop',\n            'Tablet'\n        ][i % 3],\n        site_domain: [\n            'cnn.com',\n            'nytimes.com',\n            'washingtonpost.com',\n            'usatoday.com',\n            'foxnews.com'\n        ][i % 5],\n        app_name: [\n            'Facebook',\n            'Instagram',\n            'TikTok',\n            'YouTube',\n            'Twitter'\n        ][i % 5],\n        verified_visits: Math.floor(Math.random() * 1000) + 100,\n        verified_unique_visits: Math.floor(Math.random() * 800) + 80,\n        projected_visits: Math.floor(Math.random() * 2000) + 200,\n        projected_unique_visits: Math.floor(Math.random() * 1500) + 150,\n        dwell_time: (Math.random() * 60 + 20).toFixed(2),\n        campaign_name: \"Campaign \".concat(i + 1),\n        campaign_id: \"camp_\".concat(i + 1),\n        total_verified_visits: Math.floor(Math.random() * 5000) + 500\n    }));\nconst audiencePerformanceData = [\n    {\n        id: 'seg1',\n        name: 'Millennial Shoppers',\n        type: 'demographic',\n        impressions: 120000,\n        clicks: 3200,\n        conversions: 410,\n        roi: 3.2,\n        discrepancy: 0.01,\n        confidence: 0.97,\n        color: 'blue',\n        description: 'Ages 25-40, high engagement with retail and CPG.'\n    },\n    {\n        id: 'seg2',\n        name: 'Luxury Auto Intenders',\n        type: 'behavioral',\n        impressions: 95000,\n        clicks: 2100,\n        conversions: 320,\n        roi: 4.1,\n        discrepancy: 0.04,\n        confidence: 0.91,\n        color: 'purple',\n        description: 'Users actively researching luxury vehicles.'\n    },\n    {\n        id: 'seg3',\n        name: 'Fitness Enthusiasts',\n        type: 'custom',\n        impressions: 78000,\n        clicks: 1800,\n        conversions: 250,\n        roi: 2.7,\n        discrepancy: 0.09,\n        confidence: 0.85,\n        color: 'green',\n        description: 'Custom segment: gym-goers, sports app users.'\n    },\n    {\n        id: 'seg4',\n        name: 'Parents with Young Kids',\n        type: 'demographic',\n        impressions: 67000,\n        clicks: 1500,\n        conversions: 210,\n        roi: 3.8,\n        discrepancy: 0.02,\n        confidence: 0.93,\n        color: 'yellow',\n        description: 'Parents of children under 10, high mobile usage.'\n    },\n    {\n        id: 'seg5',\n        name: 'Travel Buffs',\n        type: 'behavioral',\n        impressions: 54000,\n        clicks: 1200,\n        conversions: 180,\n        roi: 2.9,\n        discrepancy: 0.12,\n        confidence: 0.81,\n        color: 'pink',\n        description: 'Frequent travelers, airline and hotel site visitors.'\n    }\n];\n// Chart data helpers\nconst getChartData = function(data, type) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    switch(type){\n        case 'bar':\n            return {\n                labels: data.slice(0, 10).map((d)=>d.campaign_name || d.site_domain),\n                datasets: [\n                    {\n                        label: options.label || 'Value',\n                        data: data.slice(0, 10).map((d)=>d[options.field] || d.impressions),\n                        backgroundColor: options.backgroundColor || 'rgba(0, 212, 255, 0.8)',\n                        borderColor: options.borderColor || '#00d4ff',\n                        borderWidth: 1\n                    }\n                ]\n            };\n        case 'line':\n            return {\n                labels: data.slice(0, 15).map((d)=>d.date),\n                datasets: [\n                    {\n                        label: options.label || 'Value',\n                        data: data.slice(0, 15).map((d)=>d[options.field] || d.ctr),\n                        borderColor: options.borderColor || '#ff69b4',\n                        backgroundColor: options.backgroundColor || 'rgba(255, 105, 180, 0.1)',\n                        fill: true,\n                        tension: 0.4\n                    }\n                ]\n            };\n        case 'doughnut':\n            return {\n                labels: options.labels || [\n                    'Category 1',\n                    'Category 2',\n                    'Category 3'\n                ],\n                datasets: [\n                    {\n                        data: options.data || [\n                            300,\n                            200,\n                            100\n                        ],\n                        backgroundColor: options.backgroundColor || [\n                            'rgba(0, 212, 255, 0.8)',\n                            'rgba(255, 105, 180, 0.8)',\n                            'rgba(139, 92, 246, 0.8)'\n                        ],\n                        borderWidth: 2,\n                        borderColor: '#1a1a1a'\n                    }\n                ]\n            };\n        default:\n            return {\n                labels: [],\n                datasets: []\n            };\n    }\n};\n// Badge conditions\nconst getBadgeConditions = (data)=>{\n    const topCTR = data.reduce((max, item)=>parseFloat(item.ctr) > parseFloat(max.ctr) ? item : max);\n    const topViewability = data.reduce((max, item)=>parseFloat(item.viewability_rate) > parseFloat(max.viewability_rate) ? item : max);\n    const topVerifiedVisits = footTrafficData.reduce((max, item)=>item.verified_visits > max.verified_visits ? item : max);\n    return {\n        topCTR: {\n            campaign: topCTR.campaign_name,\n            value: topCTR.ctr\n        },\n        topViewability: {\n            campaign: topViewability.campaign_name,\n            value: topViewability.viewability_rate\n        },\n        topVerifiedVisits: {\n            campaign: topVerifiedVisits.campaign_name,\n            value: topVerifiedVisits.verified_visits\n        }\n    };\n};\n// Leaderboard data\nconst getLeaderboardData = (data, metric)=>{\n    return data.sort((a, b)=>parseFloat(b[metric]) - parseFloat(a[metric])).slice(0, 10).map((item, index)=>({\n            rank: index + 1,\n            name: item.campaign_name || item.site_domain,\n            value: parseFloat(item[metric]).toFixed(2),\n            metric: metric,\n            change: (Math.random() * 20 - 10).toFixed(1)\n        }));\n};\n// Progress bar data\nconst getProgressData = (data)=>{\n    return data.slice(0, 5).map((item)=>({\n            label: item.campaign_name || item.site_domain,\n            current: item.impressions || item.verified_visits,\n            target: Math.floor((item.impressions || item.verified_visits) * 1.2),\n            unit: 'impressions',\n            color: [\n                '#00d4ff',\n                '#ff69b4',\n                '#8b5cf6',\n                '#00ff88',\n                '#ff6b35'\n            ][Math.floor(Math.random() * 5)]\n        }));\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/mockData.ts\n"));

/***/ })

});